"keyword","metadata_keyword_regex","metadata_keyword_type","metadata_tool","metadata_description","metadata_tool_techniques","metadata_tool_tactics","metadata_malwares_name","metadata_groups_name","metadata_category","metadata_link","metadata_enable_endpoint_detection","metadata_enable_proxy_detection","metadata_comment","metadata_severity_score","metadata_popularity_score","metadata_github_stars","metadata_github_forks","metadata_github_updated_at","metadata_github_created_at"
"* -CollectionMethod All*loggedon*",".{0,1000}\s\-CollectionMethod\sAll.{0,1000}loggedon.{0,1000}","offensive_tool_keyword","bloodhound","Use Invoke-BloodHound from SharpHound.ps1 or use SharpHound.exe. Both can be run reflectively. Examples below use the PowerShell variant but arguments are identical.","T1552 - T1027 - T1059 - T1087","TA0003 - TA0002 - TA0007","N/A","N/A","Exploitation tools","https://github.com/BloodHoundAD/BloodHound/tree/master/Collectors","1","0","N/A","10","10","9459","1677","2024-02-09T22:50:23Z","2016-04-17T18:36:14Z"
"* -CollectionMethod LoggedOn -Verbose*",".{0,1000}\s\-CollectionMethod\sLoggedOn\s\-Verbose.{0,1000}","offensive_tool_keyword","bloodhound","Use Invoke-BloodHound from SharpHound.ps1 or use SharpHound.exe. Both can be run reflectively. Examples below use the PowerShell variant but arguments are identical.","T1552 - T1027 - T1059 - T1087","TA0003 - TA0002 - TA0007","N/A","N/A","Exploitation tools","https://github.com/BloodHoundAD/BloodHound/tree/master/Collectors","1","0","N/A","10","10","9459","1677","2024-02-09T22:50:23Z","2016-04-17T18:36:14Z"
"* -it bloodhound*",".{0,1000}\s\-it\sbloodhound.{0,1000}","offensive_tool_keyword","bloodhound","A Python based ingestor for BloodHound","T1057 - T1059 - T1053","TA0003 - TA0008 - TA0009","N/A","N/A","Reconnaissance","https://github.com/fox-it/BloodHound.py","1","0","N/A","10","10","1788","302","2024-05-21T09:30:30Z","2018-02-26T14:44:20Z"
"*/bloodhound/enumeration*",".{0,1000}\/bloodhound\/enumeration.{0,1000}","offensive_tool_keyword","bloodhound","A Python based ingestor for BloodHound","T1057 - T1059 - T1053","TA0003 - TA0008 - TA0009","N/A","N/A","Reconnaissance","https://github.com/fox-it/BloodHound.py","1","1","N/A","10","10","1788","302","2024-05-21T09:30:30Z","2018-02-26T14:44:20Z"
"*/bloodhound-data*",".{0,1000}\/bloodhound\-data.{0,1000}","offensive_tool_keyword","bloodhound","A Python based ingestor for BloodHound","T1057 - T1059 - T1053","TA0003 - TA0008 - TA0009","N/A","N/A","Reconnaissance","https://github.com/fox-it/BloodHound.py","1","1","N/A","10","10","1788","302","2024-05-21T09:30:30Z","2018-02-26T14:44:20Z"
"*/createforestcache.py*",".{0,1000}\/createforestcache\.py.{0,1000}","offensive_tool_keyword","bloodhound","BloodHound is a single page Javascript web application. built on top of Linkurious. compiled with Electron. with a Neo4j database fed by a C# data collector. BloodHound uses graph theory to reveal the hidden and often unintended relationships within an Active Directory environment. Attackers can use BloodHound to easily identify highly complex attack paths that would otherwise be impossible to quickly identify. Defenders can use BloodHound to identify and eliminate those same attack paths. Both blue and red teams can use BloodHound to easily gain a deeper understanding of privilege relationships in an Active Directory environment","T1069","TA0007","N/A","N/A","Frameworks","https://github.com/fox-it/BloodHound.py","1","1","N/A","10","10","1788","302","2024-05-21T09:30:30Z","2018-02-26T14:44:20Z"
"*/fox-it/BloodHound*",".{0,1000}\/fox\-it\/BloodHound.{0,1000}","offensive_tool_keyword","bloodhound","BloodHound is a single page Javascript web application. built on top of Linkurious. compiled with Electron. with a Neo4j database fed by a C# data collector. BloodHound uses graph theory to reveal the hidden and often unintended relationships within an Active Directory environment. Attackers can use BloodHound to easily identify highly complex attack paths that would otherwise be impossible to quickly identify. Defenders can use BloodHound to identify and eliminate those same attack paths. Both blue and red teams can use BloodHound to easily gain a deeper understanding of privilege relationships in an Active Directory environment","T1069","TA0007","N/A","N/A","Frameworks","https://github.com/fox-it/BloodHound.py","1","1","N/A","10","10","1788","302","2024-05-21T09:30:30Z","2018-02-26T14:44:20Z"
"*\BloodHound.exe*",".{0,1000}\\BloodHound\.exe.{0,1000}","offensive_tool_keyword","BloodHound","BloodHound is a single page Javascript web application. built on top of Linkurious. compiled with Electron. with a Neo4j database fed by a C# data collector. BloodHound uses graph theory to reveal the hidden and often unintended relationships within an Active Directory environment. Attackers can use BloodHound to easily identify highly complex attack paths that would otherwise be impossible to quickly identify. Defenders can use BloodHound to identify and eliminate those same attack paths. Both blue and red teams can use BloodHound to easily gain a deeper understanding of privilege relationships in an Active Directory environment","T1069 - T1482 - T1018 - T1087 - T1027 - T1046","TA0007 - TA0003 - TA0002 - TA0040 - TA0043","N/A","N/A","Reconnaissance","https://github.com/BloodHoundAD/BloodHound","1","0","N/A","10","10","9459","1677","2024-02-09T22:50:23Z","2016-04-17T18:36:14Z"
"*\BloodHoundGui\*.exe*",".{0,1000}\\BloodHoundGui\\.{0,1000}\.exe.{0,1000}","offensive_tool_keyword","BloodHound","BloodHound is a single page Javascript web application. built on top of Linkurious. compiled with Electron. with a Neo4j database fed by a C# data collector. BloodHound uses graph theory to reveal the hidden and often unintended relationships within an Active Directory environment. Attackers can use BloodHound to easily identify highly complex attack paths that would otherwise be impossible to quickly identify. Defenders can use BloodHound to identify and eliminate those same attack paths. Both blue and red teams can use BloodHound to easily gain a deeper understanding of privilege relationships in an Active Directory environment","T1069 - T1482 - T1018 - T1087 - T1027 - T1046","TA0007 - TA0003 - TA0002 - TA0040 - TA0043","N/A","N/A","Reconnaissance","https://github.com/BloodHoundAD/BloodHound","1","0","N/A","10","10","9459","1677","2024-02-09T22:50:23Z","2016-04-17T18:36:14Z"
"*\BloodHound-win32-X64*",".{0,1000}\\BloodHound\-win32\-X64.{0,1000}","offensive_tool_keyword","BloodHound","BloodHound is a single page Javascript web application. built on top of Linkurious. compiled with Electron. with a Neo4j database fed by a C# data collector. BloodHound uses graph theory to reveal the hidden and often unintended relationships within an Active Directory environment. Attackers can use BloodHound to easily identify highly complex attack paths that would otherwise be impossible to quickly identify. Defenders can use BloodHound to identify and eliminate those same attack paths. Both blue and red teams can use BloodHound to easily gain a deeper understanding of privilege relationships in an Active Directory environment","T1069 - T1482 - T1018 - T1087 - T1027 - T1046","TA0007 - TA0003 - TA0002 - TA0040 - TA0043","N/A","N/A","Reconnaissance","https://github.com/BloodHoundAD/BloodHound","1","0","N/A","10","10","9459","1677","2024-02-09T22:50:23Z","2016-04-17T18:36:14Z"
"*_BloodHound.zip*",".{0,1000}_BloodHound\.zip.{0,1000}","offensive_tool_keyword","BloodHound","BloodHound is a single page Javascript web application. built on top of Linkurious. compiled with Electron. with a Neo4j database fed by a C# data collector. BloodHound uses graph theory to reveal the hidden and often unintended relationships within an Active Directory environment. Attackers can use BloodHound to easily identify highly complex attack paths that would otherwise be impossible to quickly identify. Defenders can use BloodHound to identify and eliminate those same attack paths. Both blue and red teams can use BloodHound to easily gain a deeper understanding of privilege relationships in an Active Directory environment","T1069 - T1482 - T1018 - T1087 - T1027 - T1046","TA0007 - TA0003 - TA0002 - TA0040 - TA0043","N/A","N/A","Reconnaissance","https://github.com/BloodHoundAD/BloodHound","1","1","N/A","10","10","9459","1677","2024-02-09T22:50:23Z","2016-04-17T18:36:14Z"
"*AzureHound.ps1*",".{0,1000}AzureHound\.ps1.{0,1000}","offensive_tool_keyword","BloodHound","BloodHound is a single page Javascript web application. built on top of Linkurious. compiled with Electron. with a Neo4j database fed by a C# data collector. BloodHound uses graph theory to reveal the hidden and often unintended relationships within an Active Directory environment. Attackers can use BloodHound to easily identify highly complex attack paths that would otherwise be impossible to quickly identify. Defenders can use BloodHound to identify and eliminate those same attack paths. Both blue and red teams can use BloodHound to easily gain a deeper understanding of privilege relationships in an Active Directory environment","T1069 - T1482 - T1018 - T1087 - T1027 - T1046","TA0007 - TA0003 - TA0002 - TA0040 - TA0043","N/A","N/A","Reconnaissance","https://github.com/BloodHoundAD/BloodHound","1","0","N/A","10","10","9459","1677","2024-02-09T22:50:23Z","2016-04-17T18:36:14Z"
"*azurehound/v2*",".{0,1000}azurehound\/v2.{0,1000}","offensive_tool_keyword","BloodHound","BloodHound is a single page Javascript web application. built on top of Linkurious. compiled with Electron. with a Neo4j database fed by a C# data collector. BloodHound uses graph theory to reveal the hidden and often unintended relationships within an Active Directory environment. Attackers can use BloodHound to easily identify highly complex attack paths that would otherwise be impossible to quickly identify. Defenders can use BloodHound to identify and eliminate those same attack paths. Both blue and red teams can use BloodHound to easily gain a deeper understanding of privilege relationships in an Active Directory environment","T1069 - T1482 - T1018 - T1087 - T1027 - T1046","TA0007 - TA0003 - TA0002 - TA0040 - TA0043","N/A","N/A","Reconnaissance","https://github.com/BloodHoundAD/BloodHound","1","0","N/A","10","10","9459","1677","2024-02-09T22:50:23Z","2016-04-17T18:36:14Z"
"*bloodhound --no-sandbox*",".{0,1000}bloodhound\s\-\-no\-sandbox.{0,1000}","offensive_tool_keyword","bloodhound","A Python based ingestor for BloodHound","T1057 - T1059 - T1053","TA0003 - TA0008 - TA0009","N/A","N/A","Reconnaissance","https://github.com/fox-it/BloodHound.py","1","0","N/A","10","10","1788","302","2024-05-21T09:30:30Z","2018-02-26T14:44:20Z"
"*BloodHound-*.zip*",".{0,1000}BloodHound\-.{0,1000}\.zip.{0,1000}","offensive_tool_keyword","BloodHound","BloodHound is a single page Javascript web application. built on top of Linkurious. compiled with Electron. with a Neo4j database fed by a C# data collector. BloodHound uses graph theory to reveal the hidden and often unintended relationships within an Active Directory environment. Attackers can use BloodHound to easily identify highly complex attack paths that would otherwise be impossible to quickly identify. Defenders can use BloodHound to identify and eliminate those same attack paths. Both blue and red teams can use BloodHound to easily gain a deeper understanding of privilege relationships in an Active Directory environment","T1069 - T1482 - T1018 - T1087 - T1027 - T1046","TA0007 - TA0003 - TA0002 - TA0040 - TA0043","N/A","N/A","Reconnaissance","https://github.com/BloodHoundAD/BloodHound","1","1","N/A","10","10","9459","1677","2024-02-09T22:50:23Z","2016-04-17T18:36:14Z"
"*bloodhound.ad.*",".{0,1000}bloodhound\.ad\..{0,1000}","offensive_tool_keyword","bloodhound","A Python based ingestor for BloodHound","T1057 - T1059 - T1053","TA0003 - TA0008 - TA0009","N/A","N/A","Reconnaissance","https://github.com/fox-it/BloodHound.py","1","1","N/A","10","10","1788","302","2024-05-21T09:30:30Z","2018-02-26T14:44:20Z"
"*bloodhound.bin*",".{0,1000}bloodhound\.bin.{0,1000}","offensive_tool_keyword","BloodHound","BloodHound is a single page Javascript web application. built on top of Linkurious. compiled with Electron. with a Neo4j database fed by a C# data collector. BloodHound uses graph theory to reveal the hidden and often unintended relationships within an Active Directory environment. Attackers can use BloodHound to easily identify highly complex attack paths that would otherwise be impossible to quickly identify. Defenders can use BloodHound to identify and eliminate those same attack paths. Both blue and red teams can use BloodHound to easily gain a deeper understanding of privilege relationships in an Active Directory environment","T1069 - T1482 - T1018 - T1087 - T1027 - T1046","TA0007 - TA0003 - TA0002 - TA0040 - TA0043","N/A","N/A","Reconnaissance","https://github.com/BloodHoundAD/BloodHound","1","1","N/A","10","10","9459","1677","2024-02-09T22:50:23Z","2016-04-17T18:36:14Z"
"*bloodhound.enumeration*",".{0,1000}bloodhound\.enumeration.{0,1000}","offensive_tool_keyword","bloodhound","A Python based ingestor for BloodHound","T1057 - T1059 - T1053","TA0003 - TA0008 - TA0009","N/A","N/A","Reconnaissance","https://github.com/fox-it/BloodHound.py","1","1","N/A","10","10","1788","302","2024-05-21T09:30:30Z","2018-02-26T14:44:20Z"
"*bloodhound.py*",".{0,1000}bloodhound\.py.{0,1000}","offensive_tool_keyword","bloodhound","A Python based ingestor for BloodHound","T1057 - T1059 - T1053","TA0003 - TA0008 - TA0009","N/A","N/A","Reconnaissance","https://github.com/fox-it/BloodHound.py","1","1","N/A","10","10","1788","302","2024-05-21T09:30:30Z","2018-02-26T14:44:20Z"
"*BloodHoundAD*",".{0,1000}BloodHoundAD.{0,1000}","offensive_tool_keyword","BloodHound","BloodHound is a single page Javascript web application. built on top of Linkurious. compiled with Electron. with a Neo4j database fed by a C# data collector. BloodHound uses graph theory to reveal the hidden and often unintended relationships within an Active Directory environment. Attackers can use BloodHound to easily identify highly complex attack paths that would otherwise be impossible to quickly identify. Defenders can use BloodHound to identify and eliminate those same attack paths. Both blue and red teams can use BloodHound to easily gain a deeper understanding of privilege relationships in an Active Directory environment","T1069 - T1482 - T1018 - T1087 - T1027 - T1046","TA0007 - TA0003 - TA0002 - TA0040 - TA0043","N/A","N/A","Reconnaissance","https://github.com/BloodHoundAD/BloodHound","1","1","N/A","10","10","9459","1677","2024-02-09T22:50:23Z","2016-04-17T18:36:14Z"
"*BloodHound-master*",".{0,1000}BloodHound\-master.{0,1000}","offensive_tool_keyword","bloodhound","A Python based ingestor for BloodHound","T1057 - T1059 - T1053","TA0003 - TA0008 - TA0009","N/A","N/A","Reconnaissance","https://github.com/fox-it/BloodHound.py","1","1","N/A","10","10","1788","302","2024-05-21T09:30:30Z","2018-02-26T14:44:20Z"
"*bloodhound-python*",".{0,1000}bloodhound\-python.{0,1000}","offensive_tool_keyword","bloodhound","BloodHound is a single page Javascript web application. built on top of Linkurious. compiled with Electron. with a Neo4j database fed by a C# data collector. BloodHound uses graph theory to reveal the hidden and often unintended relationships within an Active Directory environment. Attackers can use BloodHound to easily identify highly complex attack paths that would otherwise be impossible to quickly identify. Defenders can use BloodHound to identify and eliminate those same attack paths. Both blue and red teams can use BloodHound to easily gain a deeper understanding of privilege relationships in an Active Directory environment","T1069","TA0007","N/A","N/A","Frameworks","https://github.com/fox-it/BloodHound.py","1","1","N/A","10","10","1788","302","2024-05-21T09:30:30Z","2018-02-26T14:44:20Z"
"*DomainEnumerator*",".{0,1000}DomainEnumerator.{0,1000}","offensive_tool_keyword","bloodhound","A Python based ingestor for BloodHound","T1057 - T1059 - T1053","TA0003 - TA0008 - TA0009","N/A","N/A","Reconnaissance","https://github.com/fox-it/BloodHound.py","1","1","N/A","10","10","1788","302","2024-05-21T09:30:30Z","2018-02-26T14:44:20Z"
"*dump_domain*",".{0,1000}dump_domain.{0,1000}","offensive_tool_keyword","bloodhound","A Python based ingestor for BloodHound","T1057 - T1059 - T1053","TA0003 - TA0008 - TA0009","N/A","N/A","Reconnaissance","https://github.com/fox-it/BloodHound.py","1","1","N/A","10","10","1788","302","2024-05-21T09:30:30Z","2018-02-26T14:44:20Z"
"*dumpntlm.py*",".{0,1000}dumpntlm\.py.{0,1000}","offensive_tool_keyword","bloodhound","A Python based ingestor for BloodHound","T1057 - T1059 - T1053","TA0003 - TA0008 - TA0009","N/A","N/A","Reconnaissance","https://github.com/fox-it/BloodHound.py","1","1","N/A","10","10","1788","302","2024-05-21T09:30:30Z","2018-02-26T14:44:20Z"
"*DumpSMSAPassword*",".{0,1000}DumpSMSAPassword.{0,1000}","offensive_tool_keyword","BloodHound","an adversary with local admin access to an AD-joined computer can dump the cleartext password from LSA secrets of any sMSAs installed on this computer","T1003.001 - T1078 - T1558.002","TA0006 - TA0004 - TA0003","N/A","N/A","Discovery","https://github.com/BloodHoundAD/BloodHound","1","1","AD Enumeration","10","10","9459","1677","2024-02-09T22:50:23Z","2016-04-17T18:36:14Z"
"*fox-it/BloodHound*",".{0,1000}fox\-it\/BloodHound.{0,1000}","offensive_tool_keyword","bloodhound","A Python based ingestor for BloodHound","T1057 - T1059 - T1053","TA0003 - TA0008 - TA0009","N/A","N/A","Reconnaissance","https://github.com/fox-it/BloodHound.py","1","1","N/A","10","10","1788","302","2024-05-21T09:30:30Z","2018-02-26T14:44:20Z"
"*Get-DomainSPNTicket*",".{0,1000}Get\-DomainSPNTicket.{0,1000}","offensive_tool_keyword","BloodHound","Kerberoasting With PowerView","T1558 - T1208 - T1552","TA0004 - TA0002","N/A","N/A","Exploitation tools","https://github.com/BloodHoundAD/BloodHound/tree/master/Collectors","1","1","N/A","10","10","9459","1677","2024-02-09T22:50:23Z","2016-04-17T18:36:14Z"
"*http://127.0.0.1:7474/browser/*",".{0,1000}http\:\/\/127\.0\.0\.1\:7474\/browser\/.{0,1000}","offensive_tool_keyword","bloodhound","A Python based ingestor for BloodHound","T1057 - T1059 - T1053","TA0003 - TA0008 - TA0009","N/A","N/A","Reconnaissance","https://github.com/fox-it/BloodHound.py","1","1","neo4j default local url","10","10","1788","302","2024-05-21T09:30:30Z","2018-02-26T14:44:20Z"
"*http://localhost:7474/browser/*",".{0,1000}http\:\/\/localhost\:7474\/browser\/.{0,1000}","offensive_tool_keyword","bloodhound","A Python based ingestor for BloodHound","T1057 - T1059 - T1053","TA0003 - TA0008 - TA0009","N/A","N/A","Reconnaissance","https://github.com/fox-it/BloodHound.py","1","1","neo4j default local url","10","10","1788","302","2024-05-21T09:30:30Z","2018-02-26T14:44:20Z"
"*install bloodhound*",".{0,1000}install\sbloodhound.{0,1000}","offensive_tool_keyword","bloodhound","A Python based ingestor for BloodHound","T1057 - T1059 - T1053","TA0003 - TA0008 - TA0009","N/A","N/A","Reconnaissance","https://github.com/fox-it/BloodHound.py","1","0","N/A","10","10","1788","302","2024-05-21T09:30:30Z","2018-02-26T14:44:20Z"
"*Invoke-BloodHound*",".{0,1000}Invoke\-BloodHound.{0,1000}","offensive_tool_keyword","bloodhound","Use Invoke-BloodHound from SharpHound.ps1 or use SharpHound.exe. Both can be run reflectively. Examples below use the PowerShell variant but arguments are identical.","T1552 - T1027 - T1059 - T1087","TA0003 - TA0002 - TA0007","N/A","N/A","Exploitation tools","https://github.com/BloodHoundAD/BloodHound/tree/master/Collectors","1","1","N/A","10","10","9459","1677","2024-02-09T22:50:23Z","2016-04-17T18:36:14Z"
"*neo4j console*",".{0,1000}neo4j\sconsole.{0,1000}","greyware_tool_keyword","bloodhound","he neo4j console command is used to start the Neo4j server in console mode. While it is not directly associated with a specific attack technique - it is often used in combination with tools like BloodHound to analyze and visualize data collected from Active Directory environments.","T1069","TA0007","N/A","N/A","Frameworks","https://github.com/fox-it/BloodHound.py","1","0","greyware tool - risks of False positive !","10","10","1788","302","2024-05-21T09:30:30Z","2018-02-26T14:44:20Z"
"*SharpHound.exe*",".{0,1000}SharpHound\.exe.{0,1000}","offensive_tool_keyword","BloodHound","BloodHound is a single page Javascript web application. built on top of Linkurious. compiled with Electron. with a Neo4j database fed by a C# data collector. BloodHound uses graph theory to reveal the hidden and often unintended relationships within an Active Directory environment. Attackers can use BloodHound to easily identify highly complex attack paths that would otherwise be impossible to quickly identify. Defenders can use BloodHound to identify and eliminate those same attack paths. Both blue and red teams can use BloodHound to easily gain a deeper understanding of privilege relationships in an Active Directory environment","T1069 - T1482 - T1018 - T1087 - T1027 - T1046","TA0007 - TA0003 - TA0002 - TA0040 - TA0043","N/A","N/A","Reconnaissance","https://github.com/BloodHoundAD/BloodHound","1","0","N/A","10","10","9459","1677","2024-02-09T22:50:23Z","2016-04-17T18:36:14Z"
"*sudo bloodhound*",".{0,1000}sudo\sbloodhound.{0,1000}","offensive_tool_keyword","bloodhound","BloodHound is a single page Javascript web application. built on top of Linkurious. compiled with Electron. with a Neo4j database fed by a C# data collector. BloodHound uses graph theory to reveal the hidden and often unintended relationships within an Active Directory environment. Attackers can use BloodHound to easily identify highly complex attack paths that would otherwise be impossible to quickly identify. Defenders can use BloodHound to identify and eliminate those same attack paths. Both blue and red teams can use BloodHound to easily gain a deeper understanding of privilege relationships in an Active Directory environment","T1069","TA0007","N/A","N/A","Frameworks","https://github.com/fox-it/BloodHound.py","1","0","N/A","10","10","1788","302","2024-05-21T09:30:30Z","2018-02-26T14:44:20Z"
